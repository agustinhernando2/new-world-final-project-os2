package main

import (
	// "fmt"
	"log"
	"github.com/ICOMP-UNC/newworld-agustinhernando2/internal/settings"
	
	"github.com/ICOMP-UNC/newworld-agustinhernando2/cmd/controllers"
	"github.com/ICOMP-UNC/newworld-agustinhernando2/internal/repositories"
	"github.com/ICOMP-UNC/newworld-agustinhernando2/internal/sales"
	// "github.com/gofiber/contrib/swagger"
	"github.com/gofiber/fiber/v2"

	_ "github.com/ICOMP-UNC/newworld-agustinhernando2/docs" // docs is generated by Swag CLI, you have to import it.
)


// @title Fiber Example API
// @version 1.0
// @description This is a sample Swagger for Fiber
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email fiber@swagger.io
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:3000
// @BasePath /
func main() {
	
	port := settings.Get("PORT", "3000")
	/*
		DB_USER=agustinhernando
		DB_PASSWORD=agustinhernando
		DB_NAME=agustinhernando
		PORT=3000
	*/
	db_pass := settings.Get("DB_PASSWORD", "1234")
	db_user := settings.Get("DB_USER","agustinhernando")
	db_name := settings.Get("DB_NAME","agustinhernando")

	db := settings.ConnectDatabase(db_pass, db_user, db_name)
	// Initialize repository, service, and controller
    userRepo := repositories.NewUserRepository(db)
    itemRepo := repositories.NewItemRepository(db)
    orderRepo := repositories.NewOrderRepository(db)

    // Inicializar controladores
    authController := controllers.NewAuthController(userRepo, itemRepo, orderRepo)
    adminController := controllers.NewAdminController(orderRepo)

    // Configurar Fiber
    app := fiber.New()

    // Rutas de autenticaci√≥n
    app.Post("/auth/register", authController.RegisterUser)
    app.Post("/auth/login", authController.LoginUser)
    app.Get("/auth/offers", authController.GetOffers)
    app.Post("/auth/checkout", authController.CheckoutOrders)
    app.Get("/auth/orders/:id", authController.GetOrderStatus)

    // Rutas de administrador
    app.Get("/admin/dashboard", adminController.GetDashboard)
    app.Patch("/admin/orders/:id", adminController.UpdateOrderStatus)
	salesGroup := app.Group("/sales")

	// Swagger documentation
	// app.Use(swagger.New(swagger.Config{
	// 	BasePath: "/swagger",
	// 	FilePath: "./docs/swagger.json",
	// 	Path:     "docs",
	// }))
	

	// Register routes
	salesGroup.Get("/GetSaleById", saleController.GetSaleById)    // Get all sales
	// salesGroup.Get("/:id", saleController.GetSaleById) // Get a sale by ID
	salesGroup.Post("/CreateSale", saleController.CreateSale)    // Create a new sale

	// Start server
	log.Printf("Starting server on port %s...", port)
	if err := app.Listen(":" + port); err != nil {
		log.Fatalf("Failed to start server: %v", err)
	}

	// Missing graceful shutdown
}
